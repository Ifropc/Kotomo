// Auto-generated by dukat

@file:JsModule("image-js")
@file:JsNonModule
@file:Suppress("INTERFACE_WITH_SUPERCLASS", "OVERRIDING_FINAL_MEMBER", "RETURN_TYPE_MISMATCH_ON_OVERRIDE", "CONFLICTING_OVERLOADS")

package io.github.ifropc.kotomo.externals

import kotlin.js.*
import org.khronos.webgl.*
import org.w3c.dom.*
import org.w3c.fetch.*
import org.w3c.files.*

external interface `T$1` {
    var clamped: Boolean?
        get() = definedExternally
        set(value) = definedExternally
}

external interface `T$2` {
    var channels: dynamic /* Number? | String? | Array<Number>? | Array<String>? */
        get() = definedExternally
        set(value) = definedExternally
    var min: Number?
        get() = definedExternally
        set(value) = definedExternally
    var max: Number?
        get() = definedExternally
        set(value) = definedExternally
}

external interface `T$3` {
    var radius: Number?
        get() = definedExternally
        set(value) = definedExternally
}

external interface `T$4` {
    var radius: Number?
        get() = definedExternally
        set(value) = definedExternally
    var border: BorderHandling?
        get() = definedExternally
        set(value) = definedExternally
    var channels: dynamic /* Number? | String? | Array<Number>? | Array<String>? */
        get() = definedExternally
        set(value) = definedExternally
}

external interface `T$5` {
    var color: dynamic /* Array<Number>? | String? */
        get() = definedExternally
        set(value) = definedExternally
    var colors: dynamic /* Array<Array<Number>>? | Array<String>? */
        get() = definedExternally
        set(value) = definedExternally
    var randomColors: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var distinctColors: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var alpha: Number?
        get() = definedExternally
        set(value) = definedExternally
    var labels: Array<String>?
        get() = definedExternally
        set(value) = definedExternally
    var labelsPosition: Array<Array<Number>>?
        get() = definedExternally
        set(value) = definedExternally
    var labelColor: String?
        get() = definedExternally
        set(value) = definedExternally
    var labelFont: String?
        get() = definedExternally
        set(value) = definedExternally
}

external interface `T$6` {
    var color: Array<Number>?
        get() = definedExternally
        set(value) = definedExternally
    var filled: Boolean?
        get() = definedExternally
        set(value) = definedExternally
}

@JsName("default")
external open class Image {
    open var width: Number
    open var height: Number
    open var data: dynamic /* Uint8Array | Uint16Array | Float32Array */
    open var size: Number
    open var components: Number
    open var alpha: Number /* 0 | 1 */
    open var bitDepth: BitDepth
    open var maxValue: Number
    open var colorModel: ColorModel
    open var channels: Number
    open var meta: Any?
    constructor(width: Number, height: Number, data: ArrayLike<Number>, options: ImageConstructorOptions = definedExternally)
    constructor(width: Number, height: Number, data: ArrayLike<Number>)
    constructor(width: Number, height: Number, options: ImageConstructorOptions = definedExternally)
    constructor(width: Number, height: Number)
    constructor(options: ImageConstructorOptions = definedExternally)
    constructor()
    open fun getRoiManager(): RoiManager
    open fun clone(): Image
    open fun getValueXY(x: Number, y: Number, channel: Number): Number
    open fun setValueXY(x: Number, y: Number, channel: Number, value: Number): Image /* this */
    open fun getValue(index: Number, channel: Number): Number
    open fun setValue(index: Number, channel: Number, value: Number): Image /* this */
    open fun getPixelXY(x: Number, y: Number): Array<Number>
    open fun setPixelXY(x: Number, y: Number, value: Array<Number>): Image /* this */
    open fun getPixel(index: Number): Array<Number>
    open fun setPixel(index: Number, value: Array<Number>): Image /* this */
    open fun getBit(index: Number): Number /* 0 | 1 */
    open fun setBit(index: Number)
    open fun clearBit(index: Number)
    open fun toggleBit(index: Number)
    open fun getBitXY(x: Number, y: Number): Number /* 0 | 1 */
    open fun setBitXY(x: Number, y: Number)
    open fun clearBitXY(x: Number, y: Number)
    open fun toggleBitXY(x: Number, y: Number)
    open fun save(path: String, options: SaveOptions = definedExternally): Promise<Unit>
    open fun toDataURL(type: String = definedExternally, options: SaveOptions = definedExternally): String
    open fun toBase64(type: String = definedExternally, options: SaveOptions = definedExternally): dynamic /* String | Promise<String> */
    open fun toBuffer(options: SaveOptions = definedExternally): Uint8Array
    open fun toBlob(type: String = definedExternally, quality: Number = definedExternally): Promise<Blob>
    open fun getCanvas(): HTMLCanvasElement
    open fun checkProcessable(processName: String, options: Any?)
    open fun getRGBAData(options: `T$1` = definedExternally): dynamic /* Uint8Array | Uint8ClampedArray */
    open fun invert(options: OutOrInplace = definedExternally): Image
    open fun abs(options: OutOrInplace = definedExternally): Image
    open fun level(options: `T$2` = definedExternally): Image /* this */
    open fun flipX(): Image /* this */
    open fun flipY(): Image /* this */
    open fun blurFilter(options: `T$3` = definedExternally): Image
    open fun medianFilter(options: `T$4` = definedExternally): Image
    open fun gaussianFilter(options: GaussianFilterOptions = definedExternally): Image
    open fun gradientFilter(options: GradientFilterOptions = definedExternally): Image
    open fun sobelFilter(options: GradientOptions = definedExternally): Image
    open fun scharrFilter(options: GradientOptions = definedExternally): Image
    open fun dilate(options: MorphologicalOptions = definedExternally): Image
    open fun erode(options: MorphologicalOptions = definedExternally): Image
    open fun open(options: MorphologicalOptions = definedExternally): Image
    open fun close(options: MorphologicalOptions = definedExternally): Image
    open fun topHat(options: MorphologicalOptions = definedExternally): Image
    open fun blackHat(options: MorphologicalOptions = definedExternally): Image
    open fun morphologicalGradient(options: MorphologicalOptions = definedExternally): Image
    open fun crop(options: CropOptions = definedExternally): Image
    open fun resize(options: ResizeOptions = definedExternally): Image
    open fun grey(options: GreyOptions = definedExternally): Image
    open fun mask(options: MaskOptions = definedExternally): Image
    open fun rotate(angle: Number, options: RotateOptions = definedExternally): Image
    open fun rotateLeft(): Image
    open fun rotateRight(): Image
    open fun convolution(kernel: Kernel, options: ConvolutionOptions = definedExternally): Image
    open fun paintMasks(masks: Image, options: `T$5` = definedExternally): Image
    open fun paintMasks(masks: Image): Image
    open fun paintMasks(masks: Array<Image>, options: `T$5` = definedExternally): Image
    open fun paintMasks(masks: Array<Image>): Image
    open fun paintPolygon(points: Array<Array<Number>>, options: `T$6` = definedExternally): Image

    companion object {
        fun isImage(obj: Any): Boolean
        fun fromCanvas(canvas: HTMLCanvasElement): Image
        fun createFrom(other: Image, options: ImageConstructorOptions): Image
        fun load(image: String, options: RequestInit /* RequestInit & `T$0` */ = definedExternally): Promise<Image>
        fun load(image: ArrayBuffer, options: RequestInit /* RequestInit & `T$0` */ = definedExternally): Promise<Image>
        fun load(image: Uint8Array, options: RequestInit /* RequestInit & `T$0` */ = definedExternally): Promise<Image>
    }
}

external open class RoiManager

external interface ImageConstructorOptions {
    var width: Number?
        get() = definedExternally
        set(value) = definedExternally
    var height: Number?
        get() = definedExternally
        set(value) = definedExternally
    var data: ArrayLike<Number>?
        get() = definedExternally
        set(value) = definedExternally
    var kind: ImageKind?
        get() = definedExternally
        set(value) = definedExternally
    var bitDepth: BitDepth?
        get() = definedExternally
        set(value) = definedExternally
    var components: Number?
        get() = definedExternally
        set(value) = definedExternally
    var alpha: Number? /* 0 | 1 */
        get() = definedExternally
        set(value) = definedExternally
    var colorModel: ColorModel?
        get() = definedExternally
        set(value) = definedExternally
}

external interface SaveOptions {
    var format: String?
        get() = definedExternally
        set(value) = definedExternally
    var useCanvas: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var encoder: Any?
        get() = definedExternally
        set(value) = definedExternally
}

external interface OutOrInplace {
    var inPlace: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var out: Image?
        get() = definedExternally
        set(value) = definedExternally
}

external interface MorphologicalOptions {
    var kernel: BinaryKernel?
        get() = definedExternally
        set(value) = definedExternally
    var iterations: Number?
        get() = definedExternally
        set(value) = definedExternally
}

external interface GaussianFilterOptions {
    var radius: Number?
        get() = definedExternally
        set(value) = definedExternally
    var sigma: Number?
        get() = definedExternally
        set(value) = definedExternally
    var channels: dynamic /* Number? | String? | Array<Number>? | Array<String>? */
        get() = definedExternally
        set(value) = definedExternally
    var border: BorderHandling?
        get() = definedExternally
        set(value) = definedExternally
    var algorithm: ConvolutionAlgorithm?
        get() = definedExternally
        set(value) = definedExternally
}

external interface ConvolutionOptions {
    var channels: dynamic /* Number? | String? | Array<Number>? | Array<String>? */
        get() = definedExternally
        set(value) = definedExternally
    var bitDepth: BitDepth?
        get() = definedExternally
        set(value) = definedExternally
    var normalize: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var divisor: Number?
        get() = definedExternally
        set(value) = definedExternally
    var border: BorderHandling?
        get() = definedExternally
        set(value) = definedExternally
    var algorithm: ConvolutionAlgorithm?
        get() = definedExternally
        set(value) = definedExternally
}

external interface GradientOptions {
    var direction: GradientDirection?
        get() = definedExternally
        set(value) = definedExternally
    var border: BorderHandling?
        get() = definedExternally
        set(value) = definedExternally
    var channels: dynamic /* Number? | String? | Array<Number>? | Array<String>? */
        get() = definedExternally
        set(value) = definedExternally
    var bitDepth: BitDepth?
        get() = definedExternally
        set(value) = definedExternally
}

external interface GradientFilterOptions : GradientOptions {
    var kernelX: Kernel?
        get() = definedExternally
        set(value) = definedExternally
    var kernelY: Kernel?
        get() = definedExternally
        set(value) = definedExternally
}

external enum class ImageKind {
    BINARY /* = 'BINARY' */,
    GREY /* = 'GREY' */,
    GREYA /* = 'GREYA' */,
    RGB /* = 'RGB' */,
    RGBA /* = 'RGBA' */,
    CMYK /* = 'CMYK' */,
    CMYKA /* = 'CMYKA' */
}

external enum class BitDepth {
    BINARY /* = 1 */,
    UINT8 /* = 8 */,
    UINT16 /* = 16 */,
    FLOAT32 /* = 32 */
}

external enum class ColorModel {
    GREY /* = 'GREY' */,
    RGB /* = 'RGB' */,
    HSL /* = 'HSL' */,
    HSV /* = 'HSV' */,
    CMYK /* = 'CMYK' */
}

external enum class BorderHandling {
    COPY /* = 'copy' */
}

external enum class ConvolutionAlgorithm {
    AUTO /* = 'auto' */,
    DIRECT /* = 'direct' */,
    FFT /* = 'fft' */,
    SEPARABLE /* = 'separable' */
}

external interface CropOptions {
    var x: Number?
        get() = definedExternally
        set(value) = definedExternally
    var y: Number?
        get() = definedExternally
        set(value) = definedExternally
    var width: Number?
        get() = definedExternally
        set(value) = definedExternally
    var height: Number?
        get() = definedExternally
        set(value) = definedExternally
}

external interface ResizeOptions {
    var width: Number?
        get() = definedExternally
        set(value) = definedExternally
    var height: Number?
        get() = definedExternally
        set(value) = definedExternally
    var factor: Number?
        get() = definedExternally
        set(value) = definedExternally
    var interpolation: String? /* "nearestNeighbor" */
        get() = definedExternally
        set(value) = definedExternally
    var preserveAspectRatio: Boolean?
        get() = definedExternally
        set(value) = definedExternally
}

external interface GreyOptions {
    var algorithm: dynamic /* io.github.ifropc.kotomo.externals.GreyAlgorithm? | io.github.ifropc.kotomo.externals.GreyAlgorithmCallback? */
        get() = definedExternally
        set(value) = definedExternally
    var keepAlpha: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var mergeAlpha: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var out: Image?
        get() = definedExternally
        set(value) = definedExternally
}

external enum class GreyAlgorithm {
    LUMA709 /* = 'luma709' */,
    LUMA601 /* = 'luma601' */,
    MAXIMUM /* = 'maximum' */,
    MINIMUM /* = 'minimum' */,
    AVERAGE /* = 'average' */,
    MINMAX /* = 'minmax' */,
    RED /* = 'red' */,
    GREEN /* = 'green' */,
    BLUE /* = 'blue' */,
    CYAN /* = 'cyan' */,
    MAGENTA /* = 'magenta' */,
    YELLOW /* = 'yellow' */,
    BLACK /* = 'black' */,
    HUE /* = 'hue' */,
    SATURATION /* = 'saturation' */,
    LIGHTNESS /* = 'lightness' */
}

external interface MaskOptions {
    var algorithm: dynamic /* io.github.ifropc.kotomo.externals.ThresholdAlgorithm? | "threshold" */
        get() = definedExternally
        set(value) = definedExternally
    var threshold: Number?
        get() = definedExternally
        set(value) = definedExternally
    var useAlpha: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var invert: Boolean?
        get() = definedExternally
        set(value) = definedExternally
}

external enum class ThresholdAlgorithm {
    HUANG /* = 'huang' */,
    INTERMODES /* = 'intermodes' */,
    ISODATA /* = 'isodata' */,
    LI /* = 'li' */,
    MAX_ENTROPY /* = 'maxentropy' */,
    MEAN /* = 'mean' */,
    MIN_ERROR /* = 'minerror' */,
    MOMENTS /* = 'moments' */,
    OTSU /* = 'otsu' */,
    PERCENTILE /* = 'percentile' */,
    RENYI_ENTROPY /* = 'renyientropy' */,
    SHANBHAG /* = 'shanbhag' */,
    TRIANGLE /* = 'triangle' */,
    YEN /* = 'yen' */
}

external interface RotateOptions {
    var interpolation: InterpolationAlgorithm?
        get() = definedExternally
        set(value) = definedExternally
}

external enum class GradientDirection {
    WIDTH /* = 'x' */,
    HEIGHT /* = 'y' */,
    BOTH /* = 'xy' */
}

external enum class InterpolationAlgorithm {
    NEAREST_NEIGHBOR /* = 'nearestNeighbor' */,
    BILINEAR /* = 'bilinear' */
}
